
---
# Source: search-engine/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: production-rabbitmq
  labels:
    app: rabbitmq
    chart: rabbitmq-4.1.1
    release: "production"
    heritage: "Tiller"
type: Opaque
data:
  
  rabbitmq-password: "cGFzc3dvcmQ="
  
  
  rabbitmq-erlang-cookie: "SFBjcTg4elRjWjFvWXhsUlo3Z2RzRUYzYXlLVDlFVVg="
---
# Source: search-engine/charts/rabbitmq/templates/configuration.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: production-rabbitmq-config
  labels:
    app: rabbitmq
    chart: rabbitmq-4.1.1
    release: "production"
    heritage: "Tiller"
data:
  enabled_plugins: |-
    [rabbitmq_management, rabbitmq_peer_discovery_k8s].
  rabbitmq.conf: |-
    ##username and password
    default_user=user
    default_pass=CHANGEME
    ## Clustering
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.node_cleanup.interval = 10
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    # queue master locator
    queue_master_locator=min-masters
    # enable guest user
    loopback_users.guest = false
    #disk_free_limit.absolute = 50MB
---
# Source: search-engine/charts/mongodb/templates/pvc-standalone.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  labels:
    app: mongodb
    chart: mongodb-5.3.2
    heritage: Tiller
    release: production
  name: production-mongodb
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: search-engine/charts/rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: production-rabbitmq
  labels:
    app: rabbitmq
    chart: rabbitmq-4.1.1
    release: "production"
    heritage: "Tiller"
---
# Source: search-engine/charts/rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: production-rabbitmq-endpoint-reader
  labels:
    app: rabbitmq
    chart: rabbitmq-4.1.1
    release: "production"
    heritage: "Tiller"
rules:
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get"]
---
# Source: search-engine/charts/rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: production-rabbitmq-endpoint-reader
  labels:
    app: rabbitmq
    chart: rabbitmq-4.1.1
    release: "production"
    heritage: "Tiller"
subjects:
- kind: ServiceAccount
  name: production-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: production-rabbitmq-endpoint-reader
---
# Source: search-engine/charts/mongodb/templates/svc-standalone.yaml
apiVersion: v1
kind: Service
metadata:
  name: production-mongodb
  labels:
    app: mongodb
    chart: mongodb-5.3.2
    release: "production"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: mongodb
    port: 27017
    targetPort: mongodb
  - name: metrics
    port: 9216
    targetPort: metrics
  selector:
    app: mongodb
    release: "production"
---
# Source: search-engine/charts/rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: production-rabbitmq-headless
  labels:
    app: rabbitmq
    chart: rabbitmq-4.1.1
    release: "production"
    heritage: "Tiller"
spec:
  clusterIP: None
  ports:
  - name: epmd
    port: 4369
    targetPort: epmd
  - name: amqp
    port: 5672
    targetPort: amqp
  - name: dist
    port: 25672
    targetPort: dist
  - name: stats
    port: 15672
    targetPort: stats
  selector:
    app: rabbitmq
    release: "production"
---
# Source: search-engine/charts/rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: production-rabbitmq
  labels:
    app: rabbitmq
    chart: rabbitmq-4.1.1
    release: "production"
    heritage: "Tiller"
  annotations:
    prometheus.io/port: "9090"
    prometheus.io/scrape: "true"
    
spec:
  type: ClusterIP
  ports:
  - name: epmd
    port: 4369
    targetPort: epmd
  - name: amqp
    port: 5672
    targetPort: amqp
  - name: dist
    port: 25672
    targetPort: dist
  - name: stats
    port: 15672
    targetPort: stats
  - name: metrics
    port: 9090
    targetPort: metrics
  selector:
    app: rabbitmq
    release: "production"
---
# Source: search-engine/charts/search-engine-crawler/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: production-search-engine-crawler
  labels:
    app: searchengine
    component: crawler
    release: production
spec:
  type: ClusterIP
  ports:
  - name: crawler
    port: 8000
    protocol: TCP
    targetPort: 8000
  selector:
    app: searchengine
    component: crawler
    release: production
---
# Source: search-engine/charts/search-engine-ui/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: production-search-engine-ui
  labels:
    app: searchengine
    component: ui
    release: production
spec:
  type: NodePort
  ports:
  - name: ui
    port: 8000
    protocol: TCP
    targetPort: 8000
  selector:
    app: searchengine
    component: ui
    release: production
---
# Source: search-engine/charts/mongodb/templates/deployment-standalone.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: production-mongodb
  labels:
    app: mongodb
    chart: mongodb-5.3.2
    release: "production"
    heritage: "Tiller"
spec:
  selector:
    matchLabels:
      app: mongodb
      release: "production"
  template:
    metadata:
      labels:
        app: mongodb
        release: "production"
        chart: mongodb-5.3.2
      annotations:
        prometheus.io/port: "9216"
        prometheus.io/scrape: "true"
        
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      containers:
      - name: production-mongodb
        image: docker.io/bitnami/mongodb:4.0.6
        imagePullPolicy: "Always"
        env:
        - name: MONGODB_SYSTEM_LOG_VERBOSITY
          value: "0"
        - name: MONGODB_DISABLE_SYSTEM_LOG
          value: "no"
        - name: MONGODB_ENABLE_IPV6
          value: "yes"
        ports:
        - name: mongodb
          containerPort: 27017
        livenessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        volumeMounts:
        - name: data
          mountPath: /bitnami/mongodb
        resources:
          {}
          
      - name: metrics
        image: docker.io/forekshub/percona-mongodb-exporter:latest
        imagePullPolicy: "IfNotPresent"
        env:
        command: [ 'sh', '-c', '/bin/mongodb_exporter --mongodb.uri mongodb://localhost:27017' ]
        ports:
        - name: metrics
          containerPort: 9216
        livenessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 15
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
          null
          
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: production-mongodb
---
# Source: search-engine/charts/search-engine-crawler/templates/deployment.yaml
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: production-search-engine-crawler
  labels:
    app: searchengine
    component: crawler
    release: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: searchengine
      component: crawler
      release: production
  template:
    metadata:
      name: crawler
      labels:
        app: searchengine
        component: crawler
        release: production
    spec:
      containers:
      - image: "kirillgarbar/search_engine_crawler:latest"
        name: crawler
        env:
          - name: MONGO
            value: production-mongodb
          - name: RMQ_HOST
            value: production-rabbitmq
          - name: RMQ_USERNAME
            value: user
          - name: RMQ_PASSWORD
            value: password
          - name: EXCLUDE_URLS
            value: .*github.com
---
# Source: search-engine/charts/search-engine-ui/templates/deployment.yaml
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: production-search-engine-ui
  labels:
    app: searchengine
    component: ui
    release: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: searchengine
      component: ui
      release: production
  template:
    metadata:
      name: ui
      labels:
        app: searchengine
        component: ui
        release: production
    spec:
      containers:
      - image: "kirillgarbar/search_engine_ui:latest"
        name: ui
        env:
          - name: MONGO
            value: production-mongodb
---
# Source: search-engine/charts/rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: production-rabbitmq
  labels:
    app: rabbitmq
    chart: rabbitmq-4.1.1
    release: "production"
    heritage: "Tiller"
spec:
  serviceName: production-rabbitmq-headless
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
      release: "production"
  template:
    metadata:
      labels:
        app: rabbitmq
        release: "production"
        chart: rabbitmq-4.1.1
    spec:
      serviceAccountName: production-rabbitmq
      terminationGracePeriodSeconds: 10
      containers:
      - name: rabbitmq
        image: docker.io/bitnami/rabbitmq:3.7.11
        imagePullPolicy: "IfNotPresent"
        command:
         - bash
         - -ec
         - |
            mkdir -p /opt/bitnami/rabbitmq/.rabbitmq/
            mkdir -p /opt/bitnami/rabbitmq/etc/rabbitmq/
            #persist the erlang cookie in both places for server and cli tools
            echo $RABBITMQ_ERL_COOKIE > /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie
            cp /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/.rabbitmq/
            #change permission so only the user has access to the cookie file
            chmod 600 /opt/bitnami/rabbitmq/.rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie
            #copy the mounted configuration to both places
            cp  /opt/bitnami/rabbitmq/conf/* /opt/bitnami/rabbitmq/etc/rabbitmq
            # Apply resources limits
            ulimit -n "${RABBITMQ_ULIMIT_NOFILES}"
            #replace the default password that is generated
            sed -i "s/CHANGEME/$RABBITMQ_PASSWORD/g" /opt/bitnami/rabbitmq/etc/rabbitmq/rabbitmq.conf
            # Move logs to stdout
            ln -sF /dev/stdout /opt/bitnami/rabbitmq/var/log/rabbitmq/rabbit@${MY_POD_IP}.log
            ln -sF /dev/stdout /opt/bitnami/rabbitmq/var/log/rabbitmq/rabbit@${MY_POD_IP}_upgrade.log
            exec rabbitmq-server
        volumeMounts:
          - name: config-volume
            mountPath: /opt/bitnami/rabbitmq/conf
          - name: data
            mountPath: /opt/bitnami/rabbitmq/var/lib/rabbitmq/
        ports:
        - name: epmd
          containerPort: 4369
        - name: amqp
          containerPort: 5672
        - name: dist
          containerPort: 25672
        - name: stats
          containerPort: 15672
        livenessProbe:
          exec:
            command: ["sh", "-c", "test \"$(curl -sS -f --user user:$RABBITMQ_PASSWORD 127.0.0.1:15672/api/healthchecks/node)\" = '{\"status\":\"ok\"}'"]
          initialDelaySeconds: 120
          timeoutSeconds: 20
          periodSeconds: 30
          failureThreshold: 6
          successThreshold: 1
        readinessProbe:
          exec:
            command: ["sh", "-c", "test \"$(curl -sS -f --user user:$RABBITMQ_PASSWORD 127.0.0.1:15672/api/healthchecks/node)\" = '{\"status\":\"ok\"}'"]
          initialDelaySeconds: 10
          timeoutSeconds: 20
          periodSeconds: 30
          failureThreshold: 3
          successThreshold: 1
        env:
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: K8S_SERVICE_NAME
            value: "production-rabbitmq-headless"
          - name: K8S_ADDRESS_TYPE
            value: ip
          - name: RABBITMQ_NODENAME
            value: "rabbit@$(MY_POD_IP)"
          - name: RABBITMQ_ULIMIT_NOFILES
            value: "65536"
          - name: RABBITMQ_USE_LONGNAME
            value: "true"
          - name: RABBITMQ_ERL_COOKIE
            valueFrom:
              secretKeyRef:
                name: production-rabbitmq
                key: rabbitmq-erlang-cookie
          - name: RABBITMQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: production-rabbitmq
                key: rabbitmq-password
      - name: metrics
        image: docker.io/kbudde/rabbitmq-exporter:v0.29.0
        imagePullPolicy: "IfNotPresent"
        env:
        - name: RABBIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: production-rabbitmq
              key: rabbitmq-password
        - name: RABBIT_URL
          value: "http://localhost:15672"
        - name: RABBIT_USER
          value: user
        ports:
        - name: metrics
          containerPort: 9090
        livenessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 15
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 5
          timeoutSeconds: 5
        resources:
          {}
          
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      volumes:
        - name: config-volume
          configMap:
            name: production-rabbitmq-config
            items:
            - key: rabbitmq.conf
              path: rabbitmq.conf
            - key: enabled_plugins
              path: enabled_plugins
        - name: data
          emptyDir: {}
---
# Source: search-engine/charts/search-engine-ui/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: production-search-engine-ui
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - host: search-engine-production
    http:
      paths:
      - path: /
        backend:
          serviceName: production-search-engine-ui
          servicePort: 8000
